buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.shadew.net/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'net.shadew', name: 'modutil', version: '1.0-beta.10'
    }
}

ext {
    timeOfExecution = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
}

apply plugin: 'net.minecraftforge.gradle' // ForgeGradle
apply plugin: 'org.spongepowered.mixin' // MixinGradle
apply plugin: 'net.shadew.modutil' // ModUtil

// This plugin is used to add compatibility for Eclipse workspaces.
apply plugin: 'eclipse'
// This plugin is used to add the ability to sign jars.
apply plugin: 'signing'
// This plugin is used to be able to publish to the Modding Legacy Maven (ask Jonathing for details).
apply plugin: 'maven-publish'

// Get a variable from gradle.properties, or return null if it doesn't exist.
String getVariable(String key) {
    return rootProject.hasProperty(key) ? rootProject.property(key) : null
}

// Get the Minecraft version from gradle.properties
def mc_version = "${mc_version_major}.${mc_version_minor}.${mc_version_patch}"
// Get the Minecraft Forge version from gradle.properties
def forge_version = project.hasProperty('forge_version_build') ? "${forge_version_major}.${forge_version_minor}.${forge_version_patch}.${forge_version_build}" : "${forge_version_major}.${forge_version_minor}.${forge_version_patch}"


// Get the mod version from gradle.properties
version = project.hasProperty('mod_version_modifier') ? "${mod_version_major}.${mod_version_minor}.${mod_version_patch}-${mod_version_modifier}" : "${mod_version_major}.${mod_version_minor}.${mod_version_patch}"
// Get the mod group from gradle.properties
group = "${mod_group}"
// Get the archives base name from the mod id and the Minecraft version.
archivesBaseName = "${mod_id}-${mc_version}"

// Ensure that the IDE knows that this project is for Java 8 and not anything else.
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

project.ext.canJarBeSigned = { return canJarBeSigned() }
project.ext.getProjectFingerprint = { return getProjectFingerprint() }
project.ext.sign = { File jar -> return sign(jar) }
project.ext.isOsx = { return isOsx() }

// This section prints out the Java, Minecraft, and Mod info just to double check all the values are correct.
// It is printed on every build, so make sure you double check!
println('')
println('Java Information')
println('- Java: ' + System.getProperty('java.version'))
println('- JVM: ' + System.getProperty('java.vm.version') + ' (' + System.getProperty('java.vendor') + ')')
println('- Arch: ' + System.getProperty('os.arch'))
println('')
println('Minecraft Information')
println('- Minecraft: ' + "${mc_version}".toString())
println('- Minecraft Forge: ' + "${forge_version}".toString())
println('- Mappings: ' + "${mappings_version} ${mappings_channel}".toString())
println('')
println('Mod Information')
println('- ID: ' + "${mod_id}".toString())
println('- Name: ' + "${mod_name}".toString())
println('- Version: ' + "${version}".toString())
println('')

// Any repositories for dependencies go here.
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "Modding Legacy Maven"
        url = "https://maven.moddinglegacy.com/artifactory/modding-legacy/"
    }
    maven {
        name = "Modding Legacy Mirror Maven"
        url = "https://maven.moddinglegacy.com/artifactory/mirror/"
    }
    maven {
        name = "Shadew's Maven Repo"
        url = "https://maven.shadew.net/"
    }
    maven {
        name = "tterrag's Maven Repo"
        url = "https://maven.tterrag.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl/"
    }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "Jared's Maven Repo"
        url = "https://maven.blamejared.com"
    }
}

// ModUtil setup
modutil {
    // Changelog generation
    changelogJson file('changelog.json')
    markdownChangelog file('versioninfo/latest_changelog.md')
    markdownChangelog file("versioninfo/${changelogInfo.versionNumber}_changelog.md")
    updateJson file('versioninfo/update.json')

    // Constants to inject
    constant('mod_id', mod_id)
    constant('mod_name', mod_name)
    constant('version', changelogInfo.versionNumber)
    constant('version_name', changelogInfo.versionName)
    constant('group', project.group)
    constant('build_time', project.ext.timeOfExecution)
    constant('expected_sha256', getProjectFingerprint())

    // DynamicConstant annotation class
    constantAnnotation 'me.jonathing.minecraft.foragecraft.info.DynamicConstant'
}

// Minecraft information
minecraft {
    // Mappings from gradle.properties
    mappings channel: "${mappings_channel}".toString(), version: "${mappings_version}".toString()

    // Access Transformer (commented out by default)
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Run configurations
    runs {
        // Client run configuration
        client {
            // The directory for Minecraft to run in
            workingDirectory project.file('run/client')

            // Enable mixins (comment out if using a Mixin connector)
            //arg "-mixin.config=${mod_id}.mixins.json".toString()
            //arg "-mixin.config=${mod_id}.dev.mixins.json".toString()

            // Enable Structure Gel API mixins (commented out by default)
            //arg '-mixin.config=structure_gel.mixins.json'

            // Disable refmaps for mixin in a dev environment
            property 'mixin.env.disableRefMap', 'true'

            // Mod scanning, registration, and registry dump logging (commented out by default)
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Console logging level (info by default)
            property 'forge.logging.console.level', 'info'

            // Tell Minecraft if it is running in an IDE (must be configured in your project)
            property "${mod_id}.iside".toString(), 'true'

            mods {
                // you will NEED to change this to your mod id. Unfortunately, this is not automated.
                foragecraft {
                    source sourceSets.main
                }
            }
        }

        // Server run configuration
        server {
            // The directory for Minecraft to run in
            workingDirectory project.file('run/server')

            // Enable mixins (comment out if using a Mixin connector)
            //arg "-mixin.config=${mod_id}.mixins.json".toString()
            //arg "-mixin.config=${mod_id}.dev.mixins.json".toString()

            // Enable Structure Gel API mixins (commented out by default)
            //arg '-mixin.config=structure_gel.mixins.json'

            // Disable refmaps for mixin in a dev environment
            property 'mixin.env.disableRefMap', 'true'

            // Mod scanning, registration, and registry dump logging (commented out by default)
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Console logging level (info by default)
            property 'forge.logging.console.level', 'info'

            // Tell Minecraft if it is running in an IDE (must be configured in your project)
            property "${mod_id}.iside".toString(), 'true'

            // Additional arguments exclusive to the server (nogui by default, separated by ",")
            args 'nogui'

            mods {
                // you will NEED to change this to your mod id. Unfortunately, this is not automated.
                foragecraft {
                    source sourceSets.main
                }
            }
        }

        // CI Test Server Plugin configuration
        testServer {
            // Get all the shit from the server config
            parent minecraft.runs.server

            // Tell Minecraft that we are only running a test server for the CI
            property 'minecraftdev.ci.istestserver', 'true'
        }

        // Data generation run configuration
        data {
            // The directory for Minecraft to run in
            workingDirectory project.file('run/data')

            // Enable mixins (comment out if using a Mixin connector)
            //arg "-mixin.config=${mod_id}.mixins.json".toString()
            //arg "-mixin.config=${mod_id}.dev.mixins.json".toString()

            // Enable Structure Gel API mixins (commented out by default)
            //arg '-mixin.config=structure_gel.mixins.json'

            // Disable refmaps for mixin in a dev environment
            property 'mixin.env.disableRefMap', 'true'

            // Mod scanning, registration, and registry dump logging (commented out by default)
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Console logging level (info by default)
            property 'forge.logging.console.level', 'info'

            // Tell Minecraft if it is running in an IDE (must be configured in your project)
            property "${mod_id}.iside".toString(), 'true'

            // Tell Minecraft if it is running datagen (must be configured in your project)
            property "${mod_id}.datagen".toString(), 'true'

            // Workaround for https://github.com/MinecraftForge/ForgeGradle/issues/690
            // Written by Shadew
            if (project.ext.isOsx()) {
                jvmArg("-XstartOnFirstThread")
            }

            // Additional arguments exclusive to data generation (do NOT change these unless necessary)
            args '--mod', "${mod_id}".toString(), '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                // you will NEED to change this to your mod id. Unfortunately, this is not automated.
                foragecraft {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
        }
    }
}

// Ensure the reference map is included in the source sets
mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

// Additional dependencies (including Minecraft) for the project)
dependencies {
    // Minecraft Forge
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}".toString()

    // CI Test Server Plugin
    compile fg.deobf("me.jonathing.minecraft:ci_testserver:1.16.4-1.0.1")

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.0.62:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.0.62")

    // Biomes O' Plenty
    compileOnly fg.deobf("com.github.glitchfiend:biomesoplenty:1.16.4-13.0.0.420:api-obf")
    compile fg.deobf("com.github.glitchfiend:biomesoplenty:1.16.4-13.0.0.420:universal-obf")

    // Patchouli
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-48:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-48")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${jar_specification_title}",
                "Specification-Vendor"    : "${jar_specification_vendor}",
                "Specification-Version"   : "${jar_specification_version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "${jar_specification_vendor}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector"          : "me.jonathing.minecraft.foragecraft.asm.MixinConnector"
        ])
    }
}

// Detects if the OS is macOS. Required for the workaround in genData.
static def isOsx() {
    def osProp = System.properties['os.name'].toLowerCase()
    return osProp.contains('darwin') || osProp.contains('osx') || osProp.contains('mac')
}

// Ensures that the signJar task will run on every build
// REMINDER: the jar will not be signed if the jcKeyStore key in gradle.properties does not exist
build {
    dependsOn 'signJar'
}

// detects if the jcKeyStore key in gradle.properties exists so the jar can be signed
def canJarBeSigned() {
    return getVariable('jcKeyStore') != null
}

// Returns the public fingerprint, may be empty ("")
def getProjectFingerprint() {
    if (canJarBeSigned()) {
        def sha256 = getVariable('jcKeyStoreSHA256')
        return sha256 != null ? sha256 : ''
    }
}

// Signs a jar file
def sign(File jar) {
    if (canJarBeSigned()) {
        println "Attempting to sign jar: ${jar}"
        ant.signjar(
                destDir: "${jar.parentFile}",
                jar: "${jar}",
                alias: getVariable('jcKeyStoreAlias'),
                storetype: "jks",
                keystore: getVariable("jcKeyStore"),
                storepass: getVariable('jcKeyStorePass'),
                keypass: getVariable('jcKeyStoreKeyPass'),
                verbose: true,
                preservelastmodified: "true"
        )
        println "Jar signed: ${jar}"
    } else {
        println "No keystore property found, jar will not be signed"
    }
}

// Gradle task to sign the jar.
task signJar(dependsOn: 'reobfJar') {
    doLast {
        project.ext.sign(jar.archivePath)
    }
}

// generates the javadocs and shoves them in a jar
task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

// shoves all of the sources in a jar
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// Ensures that the mod is built before it is published to the maven
publish {
    dependsOn 'build'
}

// the reobfFile takes the built file (from the build task) and uses that to publish it to the maven
def reobfFile = file("build/libs/${archivesBaseName}-${version}.jar")
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "${maven_group}"
            artifactId = "${maven_artifact_id}"
            version = "${mc_version}-${version}"

            artifact reobfFile
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            name = "ModdingLegacyMaven"
            url = uri("https://maven.moddinglegacy.com/artifactory/modding-legacy/")
            credentials {
                username = project.findProperty("mlm.user") ?: System.getenv("USERNAME")
                password = project.findProperty("mlm.key") ?: System.getenv("TOKEN")
            }
        }
    }
}
